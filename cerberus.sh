#!/bin/bash

#-----------------------------------------------
#	Author	    :   Imri Paloja
#	Email	    :	imri.paloja@gmail.com
#	HomePage    :   www.eurobytes.nl
#	Version	    :   0.0.9
#	Name        :   Cerberus
#   	OS          :   Works on Ubuntu 
#   	Description :   Powerful but lightweight Malware Scanner
#----------------------------------------------- 

# https://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard

# Variables
date="$(date "+%F %R:%S")"
# ColorCode:
yellow="\e[33m"
green="\e[32m"
red="\e[31m"
EndColor="\e[0m"

clean="\e[32m clean \e[0m"

found="\e[31m Warning \e[0m"

info="\e[33m Info \e[0m"

# File paths:
logs="/var/log/"
opt="/opt/cerberus/"
var="/var/log/"

logentry="$date - [$(whoami)] $(hostname) -"


#trap "echo CTRL-C was pressed" 2 ( 2 is the SIGINT signal, generated by pressing CTRL-C )


# Checks if there is a # in de conf file.

# Checks if the malwr.com key is enabled:
if [ "$(cat $PWD/etc/cerberus.conf | grep malwarapikey= | grep \# )" = "" ]; then
    
	malwarapikey=$(cat $PWD/etc/cerberus.conf | grep "malwarapikey=" | sed 's/malwarapikey=//g')
    
else
	
    echo "The malwr.com Key is not enabled" >>/dev/null
fi


# Checks if the VirusTotal Key is enabled:
if [ "$(cat $PWD/etc/cerberus.conf | grep -x virustotalapikey= | grep \# )" = "" ]; then
    
	virustotalapikey=$(cat $PWD/etc/cerberus.conf | grep virustotalapikey= | sed 's/virustotalapikey=//g')
    
else
	
    echo "The VirusTotal Key is not enabled" >> /dev/null
fi

# Lets see what you feed me

# Check if root user is using this:
if [ $(id -u) = "0" ]; then
    echo "" > /dev/null
else 
	echo "This scripts needs root permissions"
	exit
fi

# Checks if the input is a directory
if [ "$(file "$1" | awk {'print $2'})" = "directory" ]; then
#    echo "At the moment directories are not supported"
 #   exit

	echo "$(find "$1" -type f | wc -l) files to scan"

	
	find "$1" -type f -exec md5sum {} + > /tmp/folder_list.txt
	

	echo -n "$logentry scanning: $(find "$1" -type f)" >> $logs/cerberus_$(date +%F).log
	

	while read -r LINE; do echo $LINE | awk {'print $2" " $3'} >> $logs/cerberus_$(date +%F).log ; done < /tmp/folder_list.txt


	cat /tmp/folder_list.txt | awk {'print $1'} > /tmp/folder_list_hashes.txt

	# /tmp/main.db

	while read -r LINE; do grep $LINE opt/cerberus/databases/clam/main_clam/main.db.* | awk {'print $3'} > /tmp/found_folder_scan.txt; done < /tmp/folder_list_hashes.txt

		#Checks if the file type could be read
		if [ "$(cat /tmp/found_folder_scan.txt)" = "" ]; then

		    echo -e "...$clean"

		else 

			echo -e "...$found"

			cat $PWD/opt/cerberus/databases/clam/main_clam/main.db.* | grep $(cat /tmp/found.txt)

		fi
# exit 

else 
	#echo "input ($1) received"
    echo "" > /dev/null
fi

# checks if there is input to play with.
if [ "$1" = "" ]; then
    echo "I need some input to play with"
    exit
else 
    echo "" > /dev/null
fi

# Checks if the input is an existing file
if [ "$(file "$1" | awk {'print $2'})" = "ERROR:" ]; then
    file "$1"
    exit
else
	#echo "input ($1) received"
    echo "" > /dev/null
fi

# Checks if the input is an existing file
if [ "$(file "$1" | grep "cannot open")" = "" ]; then
    echo "" > /dev/null
else
	
    file "$1"
    exit
fi

# Scanning:
databasedir="$PWD/opt/cerberus/databases/clam/main_clam"
filebasename="$(basename "$1")"

echo -n "$logentry scanning: $1" >> $logs/cerberus_$(date +%F).log

echo "" > /tmp/hashes.txt
echo "" > /tmp/found.txt
echo -n "$filebasename $(md5sum "$1" | awk {'print $1'} | tee -a /tmp/hashes.txt) scanning"

for i in `ls $databasedir`; do {

	# echo -n "."
	
    fgrep -x -f "$databasedir/$i" /tmp/hashes.txt
	
    # comm "$databasedir/$i" /tmp/hash_found.txt 

	# perl -ne 'print if ($seen{$_} .= @ARGV) =~ /10$/' /tmp/hash_found.txt "$databasedir/$i"

	# awk 'NR==FNR{arr[$0];next} $0 in arr' /tmp/hash_found.txt "$databasedir/$i"

	# grep -x -f "opt/cerberus/databases/clam/main_clam/main.db.*" > /tmp/found.txt

    # fgrep -x -f $(cat /tmp/scanning.txt | awk {' print $1'}) $(cat databases/clam/main_clam/maindb/$i | awk {'print $3'}) >> /tmp/found.txt

};

done;
# fi

#Checks if the file type could be read
if [ "$(cat /tmp/found.txt)" = "" ]; then

    echo -e "...$clean"
    echo "... clean" >> $logs/cerberus_$(date +%F).log

else 

	echo -e "...$found"
	echo -n "... found" >> $logs/cerberus_$(date +%F).log

	cat $PWD/opt/cerberus/databases/clam/main_clam/main.db.* | grep $(cat /tmp/found.txt)

fi

# Display file type (.exe/.doc/.bin)
exiftool "$1" | grep "File Type Extension" | awk {'print $5'} > /tmp/extensions

#file "$1"
#echo ""

#Checks if the file type could be read
if [ "$(cat /tmp/extensions)" = "" ]; then

    echo "File type could not be determined" > /dev/null
else 

    # echo "Scanning metadata for extensions"
    
    echo "Type of file: "$(cat /tmp/extensions)" "  > /dev/null
    
    #exit
 #   file "$1" > /tmp/fileinfofile.txt


#	sed -i 's/$1/ /g' /tmp/fileinfofile.txt

#	cat /tmp/fileinfofile.txt
fi

#opt/cerberus/utilities/trid "$1" | tail -n +7

# Find the file types(.exe/.doc/.bin):
exiftool "$1" | grep "File Type Extension" | awk {'print $5'} > /tmp/extensions

#Checks if the file type could be read
if [ "$(cat /tmp/extensions)" = "" ]; then

    echo "File type could not be determined" > /dev/null
else 

    # echo "Scanning metadata for extensions"
    
	# (exe|xz|zip|cab|rar|7z|gzip|bzip2|tar|deb|rpm|iso)
	if [ "$(sudo grep -E -i '(exe|xz|zip|cab|rar|7z|gzip|bzip2|tar|deb|rpm|iso)' /tmp/extensions)" = "" ]; then 

		echo "Not Found" >> /dev/null

	else 

		echo "Type of file: "$(cat /tmp/extensions)" "
		#7z l "$1" | tail -n +8
		#exit
	fi


fi


$PWD/opt/cerberus/utilities/trid "$1" | tail -n +7

$PWD/opt/cerberus/utilities/osslsigncode verify "$1"

